import csv
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
from datetime import datetime
import os
from dotenv import load_dotenv

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = int(os.getenv("CHANNEL_ID"))

bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

CSV_FILE = "data.csv"

class Booking(StatesGroup):
    date = State()
    time = State()
    source = State()
    contact = State()
    count = State()
    age_min = State()
    price = State()
    comment = State()


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ /new —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å.")


@dp.message_handler(commands=['new'])
async def new_entry(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 24.05.25):")
    await Booking.date.set()


@dp.message_handler(state=Booking.date)
async def get_date(message: types.Message, state: FSMContext):
    await state.update_data(date=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 18:00):")
    await Booking.next()


@dp.message_handler(state=Booking.time)
async def get_time(message: types.Message, state: FSMContext):
    await state.update_data(time=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –º–∫ –∏–ª–∏ qh):")
    await Booking.next()


@dp.message_handler(state=Booking.source)
async def get_source(message: types.Message, state: FSMContext):
    await state.update_data(source=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç (@–Ω–∏–∫ –∏–ª–∏ –Ω–æ–º–µ—Ä):")
    await Booking.next()


@dp.message_handler(state=Booking.contact)
async def get_contact(message: types.Message, state: FSMContext):
    await state.update_data(contact=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫:")
    await Booking.next()


@dp.message_handler(state=Booking.count)
async def get_count(message: types.Message, state: FSMContext):
    await state.update_data(count=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç:")
    await Booking.next()


@dp.message_handler(state=Booking.age_min)
async def get_age_min(message: types.Message, state: FSMContext):
    await state.update_data(age_min=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É (–≤ —Ä—É–±–ª—è—Ö):")
    await Booking.next()


@dp.message_handler(state=Booking.price)
async def get_price(message: types.Message, state: FSMContext):
    await state.update_data(price=message.text)
    await message.answer("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å):")
    await Booking.next()


@dp.message_handler(state=Booking.comment)
async def get_comment(message: types.Message, state: FSMContext):
    await state.update_data(comment=message.text)
    data = await state.get_data()

    # –°–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏/–ª–æ–≥–æ–≤)
    text = (f"{data['date']}, {data['time']} ({data['source']}): {data['contact']}\n"
            f"{data['count']} —á–µ–ª, –æ—Ç {data['age_min']} –ª–µ—Ç, {data['price']}‚ÇΩ\n"
            f"{data['comment']}")
    await bot.send_message(CHANNEL_ID, text)

    # –ö—Ä–∞—Å–∏–≤–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    pretty = (
        f"üìÖ <b>–î–∞—Ç–∞</b>: {data['date']}\n"
        f"‚è∞ <b>–í—Ä–µ–º—è</b>: {data['time']}\n"
        f"üë• <b>–ö–æ–ª-–≤–æ</b>: {data['count']} —á–µ–ª–æ–≤–µ–∫ (–æ—Ç {data['age_min']} –ª–µ—Ç)\n"
        f"üí∏ <b>–¶–µ–Ω–∞</b>: {data['price']}‚ÇΩ\n"
        f"üì≤ <b>–ö–æ–Ω—Ç–∞–∫—Ç</b>: {data['contact']}\n"
        f"üß≠ <b>–ò—Å—Ç–æ—á–Ω–∏–∫</b>: {data['source']}\n"
        f"üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</b>: {data['comment'] or '‚Äî'}"
    )
    await bot.send_message(CHANNEL_ID, pretty, parse_mode="HTML")

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ CSV
    with open(CSV_FILE, 'a', newline='') as f:
        writer = csv.writer(f)
        writer.writerow([
            data['date'], data['time'], data['source'], data['contact'],
            data['count'], data['age_min'], data['price'], data['comment']
        ])

    await message.answer("–ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    await state.finish()

@dp.message_handler(commands=['csv'])
async def send_csv(message: types.Message):
    try:
        await bot.send_document(message.chat.id, types.InputFile(CSV_FILE))
    except FileNotFoundError:
        await message.answer("–§–∞–π–ª –ø–æ–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω.")

@dp.message_handler(commands=['today'])
async def send_today_entries(message: types.Message):
    try:
        today = datetime.today().strftime("%d.%m.%y")
        entries = []

        with open(CSV_FILE, 'r', newline='') as f:
            reader = csv.reader(f)
            for row in reader:
                if row and row[0] == today:  # row[0] ‚Äî –¥–∞—Ç–∞
                    entry = (f"üïì {row[1]} ‚Äî {row[4]} —á–µ–ª, –æ—Ç {row[5]} –ª–µ—Ç, {row[6]}‚ÇΩ\n"
                             f"üì≤ {row[3]} ({row[2]})\n"
                             f"üí¨ {row[7]}\n")
                    entries.append(entry)

        if entries:
            result = f"üìÖ –ó–∞–ø–∏—Å–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ({today}):\n\n" + "\n".join(entries)
        else:
            result = f"‚ùå –ù–∞ —Å–µ–≥–æ–¥–Ω—è ({today}) –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç."

        await message.answer(result)
    except FileNotFoundError:
        await message.answer("–§–∞–π–ª —Å –∑–∞–ø–∏—Å—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    executor.start_polling(dp, skip_updates=True)
